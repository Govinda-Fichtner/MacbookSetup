---
# MCP Server Registry Configuration
# Centralized configuration for all MCP (Model Context Protocol) servers
# Supports both registry images and local repository builds

servers:
  github:
    name: GitHub MCP Server
    server_type: "api_based"  # Uses environment variables for API authentication
    description: "GitHub repository management and code analysis"
    category: "code"
    source:
      type: registry
      image: mcp/github-mcp-server:latest
    environment_variables:
      - "GITHUB_PERSONAL_ACCESS_TOKEN"
    health_test:
      parse_mode: json
      path: "/health"
      expected_status: 200
      expected_response:
        status: "ok"
    capabilities:
      - "repository_management"
      - "issue_tracking"
      - "pull_requests"
      - "code_search"

  circleci:
    name: CircleCI MCP Server
    server_type: "api_based"  # Uses environment variables for API authentication
    description: "CircleCI pipeline monitoring and management"
    category: "cicd"
    source:
      type: build
      repository: https://github.com/CircleCI-Public/mcp-server-circleci.git
      image: local/mcp-server-circleci:latest
      build_context: "."
    environment_variables:
      - "CIRCLECI_TOKEN"
      - "CIRCLECI_BASE_URL"
    health_test:
      parse_mode: json
      path: "/health"
      expected_status: 200
      expected_response:
        status: "ok"
    capabilities:
      - "pipeline_monitoring"
      - "job_management"
      - "artifact_access"
      - "environment_variables"

  # inspector:
  # NOTE: MCP Inspector is NOT an MCP server - it's a debugging tool
  # Use it as: npx @modelcontextprotocol/inspector <mcp-server-command>
  # Do not include in Cursor/Claude Desktop configurations

  filesystem:
    name: "Filesystem MCP Server"
    server_type: "mount_based"  # Uses Docker mounts instead of environment variables
    description: "Official Anthropic filesystem operations server for local file management"
    category: "filesystem"
    source:
      type: registry
      image: "mcp/filesystem:latest"
    environment_variables:
      - "FILESYSTEM_ALLOWED_DIRS"
    volumes:
      - "FILESYSTEM_ALLOWED_DIRS:/project"
    health_test:
      parse_mode: json
      path: "/health"
      expected_status: 200
      expected_response:
        status: "ok"
    capabilities:
      - "file_operations"
      - "directory_management"
      - "file_search"
      - "file_metadata"
      - "secure_access"

  memory-service:
    name: "Memory Service MCP Server"
    server_type: "mount_based"  # Uses Docker mounts for ChromaDB persistence
    description: "Persistent memory storage and retrieval using ChromaDB for AI applications"
    category: "memory"
    source:
      type: build
      repository: https://github.com/doobidoo/mcp-memory-service.git
      image: local/mcp-server-memory-service:latest
      build_context: "."
    environment_variables:
      - "MCP_MEMORY_CHROMA_PATH"
      - "MCP_MEMORY_BACKUPS_PATH"
    volumes:
      - "~/ChromaDB/db:/app/chroma_db"
      - "~/ChromaDB/backup:/app/backups"
    health_test:
      type: "stdio_jsonrpc"
      method: "initialize"
      params:
        protocolVersion: "2024-11-05"
        capabilities: {}
        clientInfo:
          name: "health_checker"
          version: "1.0.0"
      expected_response:
        jsonrpc: "2.0"
        result:
          protocolVersion: "2024-11-05"
          serverInfo:
            name: "memory"
    capabilities:
      - "memory_storage"
      - "memory_retrieval"
      - "content_search"
      - "tag_based_search"
      - "time_based_recall"
      - "memory_management"
      - "backup_operations"

  docker:
    name: "Docker MCP Server"
    server_type: "privileged"
    description: "Docker container management and inspection"
    category: "system"
    source:
      type: "build"
      repository: "https://github.com/ckreiling/mcp-server-docker"
      build_context: "."
      image: "mcp-server-docker:latest"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    capabilities:
      - "container_management"
      - "image_management"
      - "network_management"
      - "volume_management"
      - "container_exec"
      - "container_logs"
      - "container_restart"

  kubernetes:
    name: "Kubernetes MCP Server (manusa)"
    server_type: "privileged"
    description: "Native Go-based Kubernetes and OpenShift management via manusa/kubernetes-mcp-server - the most \
      advanced community K8s MCP server"
    category: "infrastructure"
    source:
      type: build
      repository: https://github.com/manusa/kubernetes-mcp-server.git
      image: local/mcp-server-kubernetes:latest
      build_context: "."
    cmd: ["--log-level", "0"]


    environment_variables:
      - "KUBECONFIG"
      - "K8S_NAMESPACE"
      - "K8S_CONTEXT"
    volumes:
      - "$KUBECONFIG_HOST:/root/.kube/config:ro"
    networks:
      - "host"

  figma:
    name: "Figma Context MCP Server (GLips)"
    server_type: "api_based"
    description: "Figma design data extraction via GLips/Figma-Context-MCP - optimized for AI orchestration with \
      intelligent design filtering"
    category: "design"
    source:
      type: registry
      image: ghcr.io/metorial/mcp-container--glips--figma-context-mcp--figma-context-mcp:latest
      entrypoint: "node"
      cmd: ["dist/cli.js", "--stdio"]
    environment_variables:
      - "FIGMA_API_KEY"
    health_test:
      parse_mode: json
      path: "/health"
      expected_status: 200
      expected_response:
        status: "ready"
    capabilities:
      - "figma_file_access"
      - "design_data_extraction"
      - "layout_information_parsing"
      - "component_analysis"
      - "semantic_design_filtering"
      - "ai_orchestration_optimization"

  heroku:
    name: "Heroku Platform MCP Server (Official Heroku)"
    server_type: "api_based"
    description: "Official Heroku platform management via local/heroku-mcp-server - comprehensive app lifecycle, \
      database operations, and infrastructure automation using Docker container with bundled Heroku CLI"
    category: "platform"
    source:
      type: build
      repository: "https://github.com/heroku/heroku-mcp-server.git"
      image: "local/heroku-mcp-server:latest"
      build_context: "."
    environment_variables:
      - "HEROKU_API_KEY"
    health_test:
      parse_mode: json
      path: "/health"
      expected_status: 200
      expected_response:
        status: "healthy"
    capabilities:
      - "heroku_app_lifecycle_management"
      - "heroku_database_operations"
      - "heroku_addon_management"
      - "heroku_dyno_scaling"
      - "heroku_logs_access"
      - "heroku_pipeline_management"
      - "heroku_space_management"
      - "heroku_cli_integration"

  terraform:
    name: "Terraform MCP Server (Official HashiCorp)"
    server_type: "standalone"
    description: "Terraform Registry API access via official HashiCorp MCP server - \
      provider documentation, module discovery, and registry information for Infrastructure as Code development"
    category: "infrastructure"
    source:
      type: registry
      image: "hashicorp/terraform-mcp-server:latest"
    health_test:
      parse_mode: json
      path: "/health"
      expected_status: 200
      expected_response:
        status: "healthy"
    capabilities:
      - "terraform_registry_api"
      - "provider_documentation_access"
      - "module_discovery"
      - "terraform_registry_search"
      - "provider_resource_documentation"

  context7:
    name: "Context7 Documentation MCP Server"
    server_type: "standalone"
    description: "Context7 library documentation server by Upstash - provides up-to-date documentation, \
      code examples, and library ID resolution for any programming library without requiring API tokens"
    category: "documentation"
    source:
      type: build
      repository: "https://github.com/upstash/context7.git"
      image: "local/context7-mcp:latest"
      build_context: "."
    health_test:
      parse_mode: json
      path: "/health"
      expected_status: 200
      expected_response:
        result:
          serverInfo:
            name: "Context7"
    capabilities:
      - "library_documentation_access"
      - "current_code_examples"
      - "library_id_resolution"
      - "topic_focused_docs"
      - "version_specific_documentation"
      - "no_authentication_required"

  rails:
    name: "Rails MCP Server"
    server_type: "mount_based"
    description: "Rails project management and inspection"
    category: "development"
    source:
      type: registry
      image: "local/mcp-server-rails:latest"
    environment_variables:
      - "RAILS_MCP_ROOT_PATH"
      - "RAILS_MCP_CONFIG_HOME"
    volumes:
      - "RAILS_MCP_ROOT_PATH:/rails-projects"
      - "RAILS_MCP_CONFIG_HOME:/app/.config/rails-mcp"
    health_test:
      basic:
        command: "mcp"
        expected_output: "No projects found."
      advanced:
        command: "mcp"
        expected_output: "No projects found."
    capabilities:
      - "Project management"
      - "Rails inspection"
      - "Development tools"

  terraform-cli-controller:
    name: "Terraform CLI Controller"
    server_type: "privileged"
    description: "Terraform MCP Tool (nwiizo/tfmcp) - Rust-based CLI tool for AI assistants to manage \
      Terraform environments with configuration analysis, plan execution, and state management"
    category: "infrastructure"
    source:
      type: build
      repository: "https://github.com/nwiizo/tfmcp.git"
      image: "local/terraform-cli-controller:latest"
      build_context: "."
      cmd: ["mcp"]
    environment_variables:
      - "TERRAFORM_HOST_DIR"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "$HOME/.aws:/root/.aws:ro"
      - "$TERRAFORM_HOST_DIR:/workspace"
    networks:
      - "host"
    container_env:
      TERRAFORM_DIR: "/workspace/default"
    health_test:
      parse_mode: json
      path: "/health"
      expected_status: 200
      expected_response:
        status: "ready"
    capabilities:
      - "terraform_cli_execution"
      - "terraform_state_management"
      - "infrastructure_provisioning"
      - "terraform_plan_generation"
      - "terraform_apply_execution"
      - "terraform_workspace_management"
      - "docker_provider_support"

# Global MCP configuration
global:
  build_directory: "./mcp_builds"
  # config_path: Legacy - now using --env-file approach
  network_name: "mcp-network"
  default_timeout: 30

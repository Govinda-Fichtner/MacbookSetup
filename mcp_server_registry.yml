---
# MCP Server Registry Configuration
# Centralized configuration for all MCP (Model Context Protocol) servers
# Supports both registry images and local repository builds

servers:
  github:
    name: GitHub MCP Server
    server_type: "api_based"  # Uses environment variables for API authentication
    description: "GitHub repository management and code analysis"
    category: "code"
    source:
      type: registry
      image: mcp/github-mcp-server:latest
    environment_variables:
      - "GITHUB_PERSONAL_ACCESS_TOKEN"
    health_test:
      parse_mode: json
      path: "/health"
      expected_status: 200
      expected_response:
        status: "ok"
    capabilities:
      - "repository_management"
      - "issue_tracking"
      - "pull_requests"
      - "code_search"

  circleci:
    name: CircleCI MCP Server
    server_type: "api_based"  # Uses environment variables for API authentication
    description: "CircleCI pipeline monitoring and management"
    category: "cicd"
    source:
      type: build
      repository: https://github.com/CircleCI-Public/mcp-server-circleci.git
      image: local/mcp-server-circleci:latest
      build_context: "."
    environment_variables:
      - "CIRCLECI_TOKEN"
      - "CIRCLECI_BASE_URL"
    health_test:
      parse_mode: json
      path: "/health"
      expected_status: 200
      expected_response:
        status: "ok"
    capabilities:
      - "pipeline_monitoring"
      - "job_management"
      - "artifact_access"
      - "environment_variables"

  # inspector:
    # NOTE: MCP Inspector is NOT an MCP server - it's a debugging tool
    # Use it as: npx @modelcontextprotocol/inspector <mcp-server-command>
    # Do not include in Cursor/Claude Desktop configurations

  filesystem:
    name: "Filesystem MCP Server"
    server_type: "mount_based"  # Uses Docker mounts instead of environment variables
    description: "Official Anthropic filesystem operations server for local file management"
    category: "filesystem"
    source:
      type: registry
      image: "mcp/filesystem:latest"
    environment_variables:
      - "FILESYSTEM_ALLOWED_DIRS"
    mount_configuration:
      source_env_var: "FILESYSTEM_ALLOWED_DIRS"
      container_path: "/project"
      default_fallback: "$(pwd)"
    health_test:
      parse_mode: json
      path: "/health"
      expected_status: 200
      expected_response:
        status: "ok"
    capabilities:
      - "file_operations"
      - "directory_management"
      - "file_search"
      - "file_metadata"
      - "secure_access"

  docker:
    name: "Docker MCP Server (QuantGeekDev)"
    server_type: "privileged"
    description: "Docker container management and orchestration via QuantGeekDev docker-mcp server with direct \
      Docker API access"
    category: "infrastructure"
    source:
      type: registry
      image: "ghcr.io/metorial/mcp-container--quantgeekdev--docker-mcp--docker-mcp:latest"
    environment_variables:
      - "DOCKER_HOST"
      - "DOCKER_COMPOSE_PROJECT_NAME"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - "mcp-network"

  kubernetes:
    name: "Kubernetes MCP Server (manusa)"
    server_type: "privileged"
    description: "Native Go-based Kubernetes and OpenShift management via manusa/kubernetes-mcp-server - the most \
      advanced community K8s MCP server"
    category: "infrastructure"
    source:
      type: build
      repository: https://github.com/manusa/kubernetes-mcp-server.git
      image: local/mcp-server-kubernetes:latest
      build_context: "."
      entrypoint: "/app/kubernetes-mcp-server"  # Override default SSE mode entrypoint
    environment_variables:
      - "KUBECONFIG"
      - "K8S_NAMESPACE"
      - "K8S_CONTEXT"
    volumes:
      - "$HOME/.kube:/home/.kube:ro"
    networks:
      - "mcp-network"

  figma:
    name: "Figma Context MCP Server (GLips)"
    server_type: "api_based"
    description: "Figma design data extraction via GLips/Figma-Context-MCP - optimized for AI orchestration with \
      intelligent design filtering"
    category: "design"
    source:
      type: build
      repository: https://github.com/GLips/Figma-Context-MCP.git
      image: local/mcp-server-figma:latest
      build_context: "."
      entrypoint: "node"
      args: ["/app/dist/index.js", "--stdio"]
    environment_variables:
      - "FIGMA_API_KEY"
    health_test:
      parse_mode: json
      path: "/health"
      expected_status: 200
      expected_response:
        status: "ready"
    capabilities:
      - "figma_file_access"
      - "design_data_extraction"
      - "layout_information_parsing"
      - "component_analysis"
      - "semantic_design_filtering"
      - "ai_orchestration_optimization"

# Global MCP configuration
global:
  build_directory: "./mcp_builds"
  # config_path: Legacy - now using --env-file approach
  network_name: "mcp-network"
  default_timeout: 30

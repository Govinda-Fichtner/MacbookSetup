#!/bin/zsh\n# shellcheck shell=bash\n# shellcheck disable=SC2296,SC2034,SC2154,SC1091\n\n# macOS Development Environment Setup Script\n#\n# This script automates the installation and configuration of a development environment on macOS.\n# It installs Homebrew, all tools specified in the Brewfile, and configures the shell environment.\n#\n# Usage: ./setup.sh\n\n# Enable strict error handling\nset -e\n\n# Script configuration\nreadonly SCRIPT_VERSION=\"1.0.0\"\nreadonly ZSHRC_PATH=\"${HOME}/.zshrc\"\nZDOTDIR=\"${ZDOTDIR:-$HOME}\"\nreadonly COMPLETION_DIR=\"${HOME}/.zsh/completions\"\nreadonly ZCOMPCACHE_DIR=\"${HOME}/.zcompcache\"\nreadonly ANTIDOTE_PLUGINS_FILE=\"${ZDOTDIR}/.zsh_plugins.txt\"\n# shellcheck disable=SC2155\nreadonly SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n\n# Source logging module\n# shellcheck source=lib/logging.sh\nsource \"${SCRIPT_DIR}/lib/logging.sh\"\n\n# Color definitions\nreadonly RED='\\033[0;31m'\nreadonly GREEN='\\033[0;32m'\nreadonly BLUE='\\033[0;34m'\nreadonly YELLOW='\\033[0;33m'\nreadonly NC='\\033[0m' # No Color\n\n# Logging functions\nlog_info() { printf \"${BLUE}[INFO]${NC} %s\\n\" \"$1\" >&2; }\nlog_success() { printf \"${GREEN}[SUCCESS]${NC} %s\\n\" \"$1\" >&2; }\nlog_warning() { printf \"${YELLOW}[WARNING]${NC} %s\\n\" \"$1\" >&2; }\nlog_error() { printf \"${RED}[ERROR]${NC} %s\\n\" \"$1\" >&2; }\nlog_debug() { printf \"DEBUG: %s\\n\" \"$1\" >&2; }\n\n# Utility functions\ncheck_command() {\n  command -v \"$1\" > /dev/null 2>&1\n}\n\nensure_dir() {\n  local dir=\"$1\"\n  if [[ ! -d \"$dir\" ]]; then\n    mkdir -p \"$dir\" || {\n      log_error \"Failed to create directory: $dir\"\n      return 1\n    }\n  fi\n}\n\nbackup_file() {\n  local file=\"$1\"\n  if [[ -f \"$file\" ]]; then\n    local timestamp\n    timestamp=$(date +\"%Y%m%d%H%M%S\")\n    local backup=\"${file}.backup.${timestamp}\"\n    cp \"$file\" \"$backup\" || {\n      log_error \"Failed to create backup of $file\"\n      return 1\n    }\n    log_info \"Created backup: $backup\"\n  fi\n}\n\n# System validation\nvalidate_system() {\n  log_info \"Validating system requirements...\"\n\n  # Check OS\n  if [[ \"$(uname)\" != \"Darwin\" ]]; then\n    log_error \"This script is intended for macOS only.\"\n    return 1\n  fi\n\n  # Check if running as root\n  if [[ $EUID -eq 0 ]]; then\n    log_error \"This script should not be run as root. Please run without sudo.\"\n    return 1\n  fi\n\n  log_success \"System validation passed.\"\n  return 0\n}\n\n# HashiCorp tool installation\ninstall_hashicorp_tool() {\n  local tool=\"$1\"\n  local version=\"$2\"\n  local arch\n\n  log_info \"Checking if $tool is installed...\"\n  if check_command \"$tool\"; then\n    local current_version\n    current_version=$(\"$tool\" --version 2> /dev/null)\n    log_success \"$tool is already installed (version: $current_version).\"\n    return 0\n  fi\n\n  # Determine architecture\n  if [[ \"$(uname -m)\" == \"arm64\" ]]; then\n    arch=\"arm64\"\n  else\n    arch=\"amd64\"\n  fi\n\n  # Create temporary directory\n  local tmp_dir\n  tmp_dir=$(mktemp -d) || {\n    log_error \"Failed to create temporary directory\"\n    return 1\n  }\n\n  local download_url=\"https://releases.hashicorp.com/$tool/$version/${tool}_${version}_darwin_${arch}.zip\"\n  local zip_file=\"$tmp_dir/$tool.zip\"\n\n  # Download and install\n  if curl -sSL \"$download_url\" -o \"$zip_file\" \\\n    && unzip -q \"$zip_file\" -d \"$tmp_dir\" \\\n    && sudo mv \"$tmp_dir/$tool\" /usr/local/bin/ \\\n    && sudo chmod +x \"/usr/local/bin/$tool\"; then\n    log_success \"$tool installed successfully.\"\n    rm -rf \"$tmp_dir\"\n    return 0\n  else\n    log_error \"Failed to install $tool\"\n    rm -rf \"$tmp_dir\"\n    return 1\n  fi\n}\n\ninstall_hashicorp_tools() {\n  log_info \"Installing HashiCorp tools...\"\n  install_hashicorp_tool \"terraform\" \"1.12.1\" || log_warning \"Terraform installation skipped\"\n  install_hashicorp_tool \"packer\" \"1.12.0\" || log_warning \"Packer installation skipped\"\n}\n\n# Homebrew installation and package management\ninstall_homebrew() {\n  log_info \"Checking for Homebrew installation...\"\n  if check_command brew; then\n    log_success \"Homebrew is already installed.\"\n    return 0\n  fi\n\n  log_info \"Installing Homebrew...\"\n  /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" || {\n    log_error \"Failed to install Homebrew\"\n    return 1\n  }\n\n  # Configure Homebrew PATH based on architecture\n  if [[ \"$(uname -m)\" == \"arm64\" ]]; then\n    # shellcheck disable=SC2016\n    echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> \"$ZSHRC_PATH\"\n    eval \"$(/opt/homebrew/bin/brew shellenv)\"\n  else\n    # shellcheck disable=SC2016\n    echo 'eval \"$(/usr/local/bin/brew shellenv)\"' >> \"$ZSHRC_PATH\"\n    eval \"$(/usr/local/bin/brew shellenv)\"\n  fi\n\n  log_success \"Homebrew installed successfully.\"\n}\n\nsetup_orbstack() {\n  # Skip OrbStack setup if SKIP_ORBSTACK is set to true\n  if [[ \"${SKIP_ORBSTACK:-false}\" == \"true\" ]]; then\n    log_info \"Skipping OrbStack setup as SKIP_ORBSTACK=true\"\n    return 0\n  fi\n\n  log_info \"Setting up OrbStack...\"\n  if ! check_command orbctl; then\n    log_error \"OrbStack is not installed. Please install it first.\"\n    return 1\n  fi\n\n  # Ensure OrbStack is in PATH\n  if [[ -d \"/Applications/OrbStack.app\" ]]; then\n    log_info \"Adding OrbStack to PATH...\"\n    # shellcheck disable=SC2016\n    echo 'export PATH=\"/Applications/OrbStack.app/Contents/MacOS:$PATH\"' >> \"$ZSHRC_PATH\"\n    export PATH=\"/Applications/OrbStack.app/Contents/MacOS:$PATH\"\n  fi\n\n  # Start OrbStack if it's not running\n  if ! orbctl status > /dev/null 2>&1; then\n    log_info \"Starting OrbStack...\"\n    orbctl start || {\n      log_error \"Failed to start OrbStack\"\n      return 1\n    }\n  fi\n\n  # Wait for OrbStack to be fully initialized\n  log_info \"Waiting for OrbStack to initialize...\"\n  local retries=30\n  while [[ $retries -gt 0 ]]; do\n    if orbctl status > /dev/null 2>&1; then\n      break\n    fi\n    sleep 1\n    ((retries--))\n  done\n\n  if [[ $retries -eq 0 ]]; then\n    log_error \"OrbStack failed to initialize\"\n    return 1\n  fi\n\n  # Setup OrbStack completions\n  log_info \"Setting up OrbStack completions...\"\n  orbctl completion zsh > \"${COMPLETION_DIR}/_orbctl\" 2> /dev/null || log_warning \"Failed to generate orbctl completion\"\n\n  if [[ -f \"${SCRIPT_DIR}/completions/_orb\" ]]; then\n    cp \"${SCRIPT_DIR}/completions/_orb\" \"${COMPLETION_DIR}/_orb\" 2> /dev/null || log_warning \"Failed to install custom orb completion\"\n  fi\n\n  log_success \"OrbStack setup completed\"\n}\n\ninstall_packages() {\n  log_info \"Installing packages from Brewfile...\"\n\n  # Check if Brewfile exists\n  if [[ ! -f \"Brewfile\" ]]; then\n    log_error \"Brewfile not found in current directory. Please ensure it exists.\"\n    return 1\n  fi\n\n  # Install packages\n  if ! brew bundle check > /dev/null 2>&1; then\n    log_info \"Installing missing packages from Brewfile...\"\n    brew bundle install || {\n      log_error \"Failed to install packages\"\n      return 1\n    }\n  else\n    log_success \"All packages from Brewfile are already installed.\"\n  fi\n\n  log_success \"Package installation completed.\"\n}\n\n# Language environment setup\nsetup_ruby_environment() {\n  log_info \"Setting up Ruby environment...\"\n\n  if ! check_command rbenv; then\n    log_error \"rbenv not found. Please ensure it's installed.\"\n    return 1\n  fi\n\n  # Initialize rbenv\n  eval \"$(rbenv init - zsh)\"\n\n  # Install latest Ruby version\n  local latest_ruby\n  latest_ruby=$(rbenv install -l | grep -v - | grep -v dev | tail -1 | tr -d '[:space:]')\n\n  if ! rbenv versions | grep -q \"$latest_ruby\"; then\n    log_info \"Installing Ruby $latest_ruby...\"\n    RUBY_CONFIGURE_OPTS=\"--with-openssl-dir=$(brew --prefix openssl) --with-readline-dir=$(brew --prefix readline)\" \\\n      rbenv install \"$latest_ruby\" || {\n      log_error \"Failed to install Ruby $latest_ruby\"\n      return 1\n    }\n  fi\n\n  # Set global Ruby version\n  rbenv global \"$latest_ruby\"\n  log_success \"Ruby environment setup completed.\"\n}\n\nsetup_python_environment() {\n  log_info \"Setting up Python environment...\"\n\n  if ! check_command pyenv; then\n    log_error \"pyenv not found. Please ensure it's installed.\"\n    return 1\n  fi\n\n  # Initialize pyenv\n  eval \"$(pyenv init --path)\"\n  eval \"$(pyenv init -)\"\n\n  # Install latest Python version\n  local latest_python\n  latest_python=$(pyenv install --list | grep -v - | grep -v a | grep -v b | grep -v rc | grep \"^  [0-9]\" | tail -1 | tr -d '[:space:]')\n\n  if ! pyenv versions | grep -q \"$latest_python\"; then\n    log_info \"Installing Python $latest_python...\"\n    CPPFLAGS=\"-I$(brew --prefix openssl)/include -I$(brew --prefix sqlite3)/include\" \\\n    LDFLAGS=\"-L$(brew --prefix openssl)/lib -L$(brew --prefix sqlite3)/lib\" \\\n      pyenv install \"$latest_python\" || {\n      log_error \"Failed to install Python $latest_python\"\n      return 1\n    }\n  fi\n\n  # Set global Python version\n  pyenv global \"$latest_python\"\n  log_success \"Python environment setup completed.\"\n}\n\n# Shell configuration\nsetup_antidote() {\n  log_info \"Setting up antidote plugin manager...\"\n\n  # Create plugins file\n  if [[ ! -f \"$ANTIDOTE_PLUGINS_FILE\" ]]; then\n    cat > \"$ANTIDOTE_PLUGINS_FILE\" << 'EOF'\n# Essential ZSH plugins\nzsh-users/zsh-syntax-highlighting\nzsh-users/zsh-autosuggestions\nzsh-users/zsh-completions\nzsh-users/zsh-history-substring-search\n\n# z - directory navigation\nagkozak/zsh-z\n\n# Git plugins\nohmyzsh/ohmyzsh path:plugins/git\n\n# Kubernetes plugins\nohmyzsh/ohmyzsh path:plugins/kubectl\nohmyzsh/ohmyzsh path:plugins/helm\n\n# Development tools completions\nohmyzsh/ohmyzsh path:plugins/terraform\nohmyzsh/ohmyzsh path:plugins/docker\nohmyzsh/ohmyzsh path:plugins/docker-compose\n\n# Utility plugins\nohmyzsh/ohmyzsh path:plugins/common-aliases\nohmyzsh/ohmyzsh path:plugins/brew\nohmyzsh/ohmyzsh path:plugins/fzf\nEOF\n  fi\n\n  # Add antidote configuration to .zshrc\n  local antidote_config\n  antidote_config=\"# Initialize antidote\n[[ -e \\$(brew --prefix)/opt/antidote/share/antidote/antidote.zsh ]] && source \\$(brew --prefix)/opt/antidote/share/antidote/antidote.zsh\nautoload -Uz compinit && compinit\nantidote load \\${ZDOTDIR:-\\$HOME}/.zsh_plugins.txt\"\n\n  if ! grep -q \"Initialize antidote\" \"$ZSHRC_PATH\"; then\n    echo -e \"\\n$antidote_config\" >> \"$ZSHRC_PATH\"\n  fi\n\n  log_success \"Antidote setup completed.\"\n}\n\nsetup_shell_completions() {\n  log_info \"Setting up shell completions...\"\n\n  # Ensure completion directories exist\n  ensure_dir \"$COMPLETION_DIR\"\n  ensure_dir \"$ZCOMPCACHE_DIR\"\n\n  # Add completion configuration to .zshrc\n  # shellcheck disable=SC2124\n  local completion_config=(\n    \"# Initialize completions\"\n    \"# Ensure we're running in zsh\"\n    \"if [ -n \\\"\\$BASH_VERSION\\\" ]; then\"\n    \"    exec /bin/zsh \\\"\\$0\\\" \\\"\\$@\\\"\"\n    \"fi\"\n    \"\"\n    \"# Initialize completion system\"\n    \"autoload -Uz compinit\"\n    \"if [[ -f ~/.zcompdump && \\$(find ~/.zcompdump -mtime +1) ]]; then\"\n    \"    compinit -i\"\n    \"else\"\n    \"    compinit -C -i\"\n    \"fi\"\n    \"\"\n    \"# Completion settings\"\n    \"zstyle ':completion:*' menu select\"\n    \"zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'\"\n    \"zstyle ':completion::complete:*' use-cache on\"\n    \"zstyle ':completion::complete:*' cache-path \\\"\\$ZCOMPCACHE_DIR\\\"\"\n    \"\"\n    \"# Source fzf completions if available\"\n    \"if [[ -f \\\"\\$(brew --prefix)/opt/fzf/shell/completion.zsh\\\" ]]; then\"\n    \"    source \\\"\\$(brew --prefix)/opt/fzf/shell/completion.zsh\\\" 2>/dev/null\"\n    \"fi\"\n    \"\"\n    \"# Additional completion sources\"\n    \"fpath=(\\\"${COMPLETION_DIR}\\\" \\\"\\${fpath[@]}\\\")\"\n    \"\"\n    \"# Docker completion (comes with OrbStack)\"\n    \"if command -v docker >/dev/null 2>&1; then\"\n    \"    source <(docker completion zsh)\"\n    \"fi\"\n    \"\"\n    \"# Terraform completion\"\n    \"if command -v terraform >/dev/null 2>&1; then\"\n    \"    complete -o nospace -C terraform terraform\"\n    \"fi\"\n    \"\"\n    \"# Kubectl completion\"\n    \"if command -v kubectl >/dev/null 2>&1; then\"\n    \"    source <(kubectl completion zsh)\"\n    \"fi\"\n    \"\"\n    \"# Helm completion\"\n    \"if command -v helm >/dev/null 2>&1; then\"\n    \"    source <(helm completion zsh)\"\n    \"fi\"\n    \"\"\n    \"# Pyenv completion\"\n    \"if command -v pyenv >/dev/null 2>&1; then\"\n    \"    eval \\\"\\$(pyenv init -)\\\"\"\n    \"fi\"\n    \"\"\n    \"# Packer completion\"\n    \"if command -v packer >/dev/null 2>&1; then\"\n    \"    complete -o nospace -C packer packer\"\n    \"fi\"\n  )\n\n  if ! grep -q \"Initialize completions\" \"$ZSHRC_PATH\"; then\n    printf \"%s\\n\" \"${completion_config[@]}\" >> \"$ZSHRC_PATH\"\n  fi\n\n  # Force regeneration of completion cache\n  rm -f \"${HOME}/.zcompdump\"*\n  rm -f \"${ZCOMPCACHE_DIR}/\"*\n\n  # Set up completions immediately for current session\n  if [[ -f \"$(brew --prefix)/opt/fzf/shell/completion.zsh\" ]]; then\n    # shellcheck disable=SC1090\n    source \"$(brew --prefix)/opt/fzf/shell/completion.zsh\" 2> /dev/null || log_warning \"Failed to source fzf completion\"\n  fi\n\n  # Source completions for tools that are already installed\n  for tool in docker terraform kubectl helm pyenv packer; do\n    if command -v \"$tool\" > /dev/null 2>&1; then\n      case \"$tool\" in\n        docker | kubectl | helm)\n          # shellcheck disable=SC1090\n          source <(\"$tool\" completion zsh) 2> /dev/null || log_warning \"Failed to source $tool completion\"\n          ;;\n        terraform | packer)\n          complete -o nospace -C \"$tool\" \"$tool\" 2> /dev/null || log_warning \"Failed to set up $tool completion\"\n          ;;\n        pyenv)\n          eval \"$(pyenv init -)\" 2> /dev/null || log_warning \"Failed to initialize pyenv\"\n          ;;\n      esac\n    fi\n  done\n\n  log_success \"Shell completions setup completed.\"\n}\n\nconfigure_shell() {\n  log_info \"Configuring shell environment...\"\n\n  # Create or backup .zshrc\n  if [[ ! -f \"$ZSHRC_PATH\" ]]; then\n    touch \"$ZSHRC_PATH\"\n  else\n    backup_file \"$ZSHRC_PATH\"\n  fi\n\n  # Setup components\n  setup_antidote\n  setup_shell_completions\n\n  # Add tool-specific configurations\n  local configs=(\n    \"rbenv:rbenv init - zsh\"\n    \"pyenv:pyenv init --path\\npyenv init -\"\n    \"direnv:direnv hook zsh\"\n    \"starship:starship init zsh\"\n  )\n\n  for config in \"${configs[@]}\"; do\n    local tool=\"${config%%:*}\"\n    local init_cmd=\"${config#*:}\"\n\n    if check_command \"$tool\"; then\n      if ! grep -q \"$tool\" \"$ZSHRC_PATH\"; then\n        echo -e \"\\n# Initialize $tool\\neval \\\"\\$($init_cmd)\\\"\" >> \"$ZSHRC_PATH\"\n      fi\n    fi\n  done\n\n  log_success \"Shell configuration completed.\"\n}\n\n# Main execution\nmain() {\n  log_info \"Starting macOS development environment setup (v${SCRIPT_VERSION})...\"\n\n  validate_system || exit 1\n  install_homebrew || exit 1\n  install_packages || exit 1\n  setup_orbstack || log_warning \"OrbStack setup incomplete\"\n  install_hashicorp_tools || log_warning \"Some HashiCorp tools may not be installed\"\n  configure_shell || exit 1\n  setup_ruby_environment || log_warning \"Ruby environment setup incomplete\"\n  setup_python_environment || log_warning \"Python environment setup incomplete\"\n\n  # Install Antidote\n  if ! command -v antidote > /dev/null 2>&1; then\n    log_info \"Installing Antidote...\"\n    brew install antidote || {\n      log_error \"Failed to install Antidote\"\n      return 1\n    }\n  fi\n\n  # Source Antidote and bundle plugins\n  if [[ -e \"$(brew --prefix)/opt/antidote/share/antidote/antidote.zsh\" ]]; then\n    # Initialize completion system\n    autoload -Uz compinit\n    if [[ -f ~/.zcompdump && $(find ~/.zcompdump -mtime +1) ]]; then\n      compinit -i\n    else\n      compinit -C -i\n    fi\n\n    source \"$(brew --prefix)/opt/antidote/share/antidote/antidote.zsh\"\n    log_info \"Loading Antidote plugins...\"\n    antidote load \"${ZDOTDIR:-$HOME}/.zsh_plugins.txt\" || {\n      log_error \"Failed to load Antidote plugins\"\n      return 1\n    }\n    log_success \"Antidote plugins loaded successfully\"\n  else\n    log_error \"Antidote installation not found\"\n    return 1\n  fi\n\n  log_success \"Antidote setup completed\"\n\n  log_success \"Setup completed successfully!\"\n  log_info \"Please restart your terminal or run: source $ZSHRC_PATH\"\n}\n\nmain \"$@\"\n
{
  "version": 1,
  "rules": [
    {
      "name": "shell-script-validation",
      "description": "Enforce shell script best practices and prevent common CI errors",
      "documentation": {
        "url": "https://www.shellcheck.net/wiki",
        "description": "Rules to prevent common shell script CI errors and ensure proper validation.",
        "guidelines": [
          "Always run ShellCheck after every change of shell scripts to ensure they are not flawed",
          "Use absolute paths when sourcing files to prevent ShellCheck SC1091 errors",
          "Add proper ShellCheck directives for known exceptions",
          "Control command output in CI environments",
          "Maintain consistent shell script headers",
          "Use zsh as primary shell with bash compatibility mode for ShellCheck"
        ],
        "disabled_rules": {
          "SC1091": "Not following source - needed for dynamic includes",
          "SC2296": "Parameter expansion array access - needed for zsh compatibility",
          "SC2034": "Unused variables - needed for zsh compatibility",
          "SC2154": "Referenced but not assigned - needed for zsh compatibility",
          "SC2016": "Expressions in single quotes - needed for eval safety"
        }
      },
      "patterns": [
        {
          "pattern": "\\.sh$",
          "checks": [
            {
              "type": "shellcheck",
              "options": {
                "shell": "bash",
                "severity": "style",
                "external-sources": true,
                "check-sourced": true,
                "source-path": ["${workspace}", "${workspace}/lib", "${HOME}"],
                "disable": ["SC1091", "SC2296", "SC2034", "SC2154", "SC2016"],
                "enable": ["all"],
                "format": "json"
              }
            },
            {
              "type": "regex",
              "pattern": "^#!/bin/zsh\\n# shellcheck shell=bash\\n# shellcheck disable=([A-Z0-9,]+)$",
              "message": "Shell scripts should have proper header with shellcheck directives",
              "inverse": true,
              "severity": "error"
            },
            {
              "type": "regex",
              "pattern": "source\\s+[\"']?[^/$]",
              "message": "Use absolute paths or ./ prefix when sourcing files",
              "severity": "warning"
            },
            {
              "type": "regex",
              "pattern": "\\bsource\\s+[\"']?\\$\\{?ZDOTDIR",
              "message": "When sourcing zsh config files, add # shellcheck disable=SC1091 above the line",
              "severity": "warning"
            },
            {
              "type": "regex",
              "pattern": "(?<!2>&1|>/dev/null)\\s+[|>]",
              "message": "Command output should be explicitly redirected in CI scripts",
              "severity": "warning"
            },
            {
              "type": "regex",
              "pattern": "eval\\s+\"\\$\\([^)]+\\)\"\\s*(?!>/dev/null)",
              "message": "Eval command output should be redirected to control CI output",
              "severity": "warning"
            }
          ]
        }
      ],
      "actions": {
        "on-save": "validate",
        "quick-fix": {
          "SC1091": {
            "pattern": "source\\s+([\"']?)(.*?)\\1",
            "replacement": "# shellcheck disable=SC1091\nsource $1$2$1"
          },
          "missing-header": {
            "pattern": "^#!.*\\n(?!# shellcheck)",
            "replacement": "#!/bin/zsh\n# shellcheck shell=bash\n# shellcheck disable=SC2296,SC2034,SC2154,SC1091\n"
          }
        }
      }
    },
    {
      "name": "ci-pre-commit-alignment",
      "description": "Ensure alignment between CI and pre-commit configurations",
      "patterns": [
        {
          "pattern": "\\.cirrus\\.yml$|\\.pre-commit-config\\.yaml$",
          "checks": [
            {
              "type": "regex",
              "pattern": "shellcheck.*--exclude=([^\\s]+)",
              "message": "ShellCheck exclude rules must match between CI and pre-commit configurations",
              "severity": "error"
            },
            {
              "type": "regex",
              "pattern": "shellcheck.*--source-path=([^\\s]+)",
              "message": "ShellCheck source paths must match between CI and pre-commit configurations",
              "severity": "error"
            },
            {
              "type": "regex",
              "pattern": "shfmt.*-i\\s+([0-9]+)",
              "message": "shfmt indentation settings must be consistent across configurations",
              "severity": "error"
            }
          ]
        }
      ],
      "actions": {
        "on-save": "validate",
        "on-commit": {
          "command": "git rev-parse HEAD | xargs -I {} echo 'Monitoring CI run for commit {}' && open https://cirrus-ci.com/github/Govinda-Fichtner/MacbookSetup/{}",
          "message": "Opening CI run for monitoring. Please ensure the build passes before proceeding."
        }
      }
    },
    {
      "name": "ci-monitoring",
      "description": "Enforce CI monitoring practices",
      "patterns": [
        {
          "pattern": ".*",
          "checks": [
            {
              "type": "commit",
              "options": {
                "require-ci-check": true,
                "wait-for-completion": true,
                "auto-fix-attempts": 3,
                "monitor-url": "https://cirrus-ci.com/github/Govinda-Fichtner/MacbookSetup"
              }
            }
          ]
        }
      ],
      "documentation": {
        "description": "Rules to ensure proper CI monitoring and follow-up",
        "guidelines": [
          "Monitor CI runs after each commit",
          "Fix any failing checks promptly",
          "Ensure configurations stay aligned",
          "Document any required follow-up work",
          "Keep build status green"
        ]
      }
    }
  ],
  "settings": {
    "shell-script-validation": {
      "enabled": true,
      "autofix": true
    },
    "ci-pre-commit-alignment": {
      "enabled": true,
      "autofix": false
    },
    "ci-monitoring": {
      "enabled": true,
      "autofix": false
    }
  }
} 
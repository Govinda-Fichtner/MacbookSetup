Running: /bin/sh [bash 3.2.57(1)-release]
.........W......W....W........WWWW...............FFFFF....s..s.....................................................................................

Examples:
  1) JSON Configuration Validation Claude Desktop JSON Configuration generates valid JSON without syntax errors
     When run jq . /Users/gfichtner/MacbookSetup/tmp/test_home/Library/Application Support/Claude/claude_desktop_config.json

     1.1) WARNING: There was output to stdout but not found expectation

            stdout: {
              "mcpServers": {
                "github": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "mcp/github-mcp-server:latest"
                  ]
                },
                "circleci": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "local/mcp-server-circleci:latest"
                  ]
                },
                "filesystem": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "--volume",
                    "/Users/gfichtner/MacbookSetup:/project",
                    "mcp/filesystem:latest",
                    "/project"
                  ]
                },
                "docker": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--volume=/var/run/docker.sock:/var/run/docker.sock",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "mcp-server-docker:latest"
                  ]
                },
                "kubernetes": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--network=host",
                    "--volume=$KUBECONFIG_HOST:/root/.kube/config:ro",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "local/mcp-server-kubernetes:latest"
                  ]
                },
                "figma": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "--entrypoint",
                    "node",
                    "ghcr.io/metorial/mcp-container--glips--figma-context-mcp--figma-context-mcp:latest",
                    "dist/cli.js",
                    "--stdio"
                  ]
                },
                "heroku": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "local/heroku-mcp-server:latest"
                  ]
                },
                "terraform": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "hashicorp/terraform-mcp-server:latest"
                  ]
                },
                "rails": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "--volume",
                    "/Users/user/rails-projects:/rails-projects",
                    "--volume",
                    "/Users/user/.config:/app/.config/rails-mcp",
                    "local/mcp-server-rails:latest"
                  ]
                },
                "terraform-cli-controller": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--network=host",
                    "--volume=/var/run/docker.sock:/var/run/docker.sock",
                    "--volume=/Users/gfichtner/MacbookSetup/tmp/test_home/.aws:/root/.aws:ro",
                    "--volume=/Users/gfichtner/MacbookSetup/tmp/test_home/terraform-projects:/workspace",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "local/terraform-cli-controller:latest",
                    "mcp"
                  ]
                }
              }
            }

          # spec/json_validation_spec.sh:112-116

  2) JSON Configuration Validation JSON Content Validation has proper JSON indentation (2 spaces)
     When run sh -c head -10 '/Users/gfichtner/MacbookSetup/tmp/test_home/.cursor/mcp.json' | grep -E '^  [^[:space:]]'

     2.1) WARNING: There was output to stdout but not found expectation

            stdout:   "mcpServers": {

          # spec/json_validation_spec.sh:162-167

  3) JSON Configuration Validation Generation Process Isolation config generation does not pollute JSON with log output
     When run jq . /Users/gfichtner/MacbookSetup/tmp/test_home/.cursor/mcp.json

     3.1) WARNING: There was output to stdout but not found expectation

            stdout: {
              "mcpServers": {
                "github": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "mcp/github-mcp-server:latest"
                  ]
                },
                "circleci": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "local/mcp-server-circleci:latest"
                  ]
                },
                "filesystem": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "--volume",
                    "/Users/gfichtner/MacbookSetup:/project",
                    "mcp/filesystem:latest",
                    "/project"
                  ]
                },
                "docker": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--volume=/var/run/docker.sock:/var/run/docker.sock",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "mcp-server-docker:latest"
                  ]
                },
                "kubernetes": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--network=host",
                    "--volume=$KUBECONFIG_HOST:/root/.kube/config:ro",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "local/mcp-server-kubernetes:latest"
                  ]
                },
                "figma": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "--entrypoint",
                    "node",
                    "ghcr.io/metorial/mcp-container--glips--figma-context-mcp--figma-context-mcp:latest",
                    "dist/cli.js",
                    "--stdio"
                  ]
                },
                "heroku": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "local/heroku-mcp-server:latest"
                  ]
                },
                "terraform": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "hashicorp/terraform-mcp-server:latest"
                  ]
                },
                "rails": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "--volume",
                    "/Users/user/rails-projects:/rails-projects",
                    "--volume",
                    "/Users/user/.config:/app/.config/rails-mcp",
                    "local/mcp-server-rails:latest"
                  ]
                },
                "terraform-cli-controller": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--network=host",
                    "--volume=/var/run/docker.sock:/var/run/docker.sock",
                    "--volume=/Users/gfichtner/MacbookSetup/tmp/test_home/.aws:/root/.aws:ro",
                    "--volume=/Users/gfichtner/MacbookSetup/tmp/test_home/terraform-projects:/workspace",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "local/terraform-cli-controller:latest",
                    "mcp"
                  ]
                }
              }
            }

          # spec/json_validation_spec.sh:196-200

  4) JSON Configuration Validation MCP Manager JSON Validation JSON Structure Validation Cursor configuration file exists
     When run cat /Users/gfichtner/MacbookSetup/tmp/test_home/.cursor/mcp.json

     4.1) WARNING: There was output to stdout but not found expectation

            stdout: {
              "mcpServers": {
                "github": {
                  "command": "docker",
                  "args": [
                    "run", "--rm", "-i",
                    "--env-file", "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "mcp/github-mcp-server:latest"
                  ]
                },
                "circleci": {
                  "command": "docker",
                  "args": [
                    "run", "--rm", "-i",
                    "--env-file", "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "local/mcp-server-circleci:latest"
                  ]
                },
                "filesystem": {
                  "command": "docker",
                  "args": [
                    "run", "--rm", "-i",
                    "--env-file", "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                  "--volume", "/Users/gfichtner/MacbookSetup:/project",
                    "mcp/filesystem:latest",
                    "/project"
                  ]
                },
                "docker": {
                  "command": "docker",
                  "args": [
                    "run", "--rm", "-i",
                    "--volume=/var/run/docker.sock:/var/run/docker.sock",
                    "--env-file", "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "mcp-server-docker:latest"
                  ]
                },
                "kubernetes": {
                  "command": "docker",
                  "args": [
                    "run", "--rm", "-i",
                    "--network=host",
                    "--volume=$KUBECONFIG_HOST:/root/.kube/config:ro",
                    "--env-file", "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "local/mcp-server-kubernetes:latest"
                  ]
                },
                "figma": {
                  "command": "docker",
                  "args": [
                    "run", "--rm", "-i",
                    "--env-file", "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "--entrypoint", "node",
                    "ghcr.io/metorial/mcp-container--glips--figma-context-mcp--figma-context-mcp:latest",
                    "dist/cli.js",
                    "--stdio"
                  ]
                },
                "heroku": {
                  "command": "docker",
                  "args": [
                    "run", "--rm", "-i",
                    "--env-file", "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "local/heroku-mcp-server:latest"
                  ]
                },
                "terraform": {
                  "command": "docker",
                  "args": [
                    "run", "--rm", "-i",
                    "--env-file", "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "hashicorp/terraform-mcp-server:latest"
                  ]
                },
                "rails": {
                  "command": "docker",
                  "args": [
                    "run", "--rm", "-i",
                    "--env-file", "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                  "--volume", "/Users/user/rails-projects:/rails-projects",
                  "--volume", "/Users/user/.config:/app/.config/rails-mcp",
                    "local/mcp-server-rails:latest"
                  ]
                },
                "terraform-cli-controller": {
                  "command": "docker",
                  "args": [
                    "run", "--rm", "-i",
                    "--network=host",
                    "--volume=/var/run/docker.sock:/var/run/docker.sock",
                    "--volume=/Users/gfichtner/MacbookSetup/tmp/test_home/.aws:/root/.aws:ro",
                    "--volume=/Users/gfichtner/MacbookSetup/tmp/test_home/terraform-projects:/workspace",
                    "--env-file", "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "local/terraform-cli-controller:latest",
                    "mcp"
                  ]
                }
              }
            }

          # spec/json_validation_spec.sh:276-279

  5) JSON Configuration Validation MCP Manager JSON Validation JSON Structure Validation generates valid JSON for Cursor configuration
     When run jq . /Users/gfichtner/MacbookSetup/tmp/test_home/.cursor/mcp.json

     5.1) WARNING: There was output to stdout but not found expectation

            stdout: {
              "mcpServers": {
                "github": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "mcp/github-mcp-server:latest"
                  ]
                },
                "circleci": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "local/mcp-server-circleci:latest"
                  ]
                },
                "filesystem": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "--volume",
                    "/Users/gfichtner/MacbookSetup:/project",
                    "mcp/filesystem:latest",
                    "/project"
                  ]
                },
                "docker": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--volume=/var/run/docker.sock:/var/run/docker.sock",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "mcp-server-docker:latest"
                  ]
                },
                "kubernetes": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--network=host",
                    "--volume=$KUBECONFIG_HOST:/root/.kube/config:ro",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "local/mcp-server-kubernetes:latest"
                  ]
                },
                "figma": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "--entrypoint",
                    "node",
                    "ghcr.io/metorial/mcp-container--glips--figma-context-mcp--figma-context-mcp:latest",
                    "dist/cli.js",
                    "--stdio"
                  ]
                },
                "heroku": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "local/heroku-mcp-server:latest"
                  ]
                },
                "terraform": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "hashicorp/terraform-mcp-server:latest"
                  ]
                },
                "rails": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "--volume",
                    "/Users/user/rails-projects:/rails-projects",
                    "--volume",
                    "/Users/user/.config:/app/.config/rails-mcp",
                    "local/mcp-server-rails:latest"
                  ]
                },
                "terraform-cli-controller": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--network=host",
                    "--volume=/var/run/docker.sock:/var/run/docker.sock",
                    "--volume=/Users/gfichtner/MacbookSetup/tmp/test_home/.aws:/root/.aws:ro",
                    "--volume=/Users/gfichtner/MacbookSetup/tmp/test_home/terraform-projects:/workspace",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "local/terraform-cli-controller:latest",
                    "mcp"
                  ]
                }
              }
            }

          # spec/json_validation_spec.sh:281-284

  6) JSON Configuration Validation MCP Manager JSON Validation JSON Structure Validation Claude Desktop configuration file exists
     When run cat /Users/gfichtner/MacbookSetup/tmp/test_home/Library/Application Support/Claude/claude_desktop_config.json

     6.1) WARNING: There was output to stdout but not found expectation

            stdout: {
              "mcpServers": {
                "github": {
                  "command": "docker",
                  "args": [
                    "run", "--rm", "-i",
                    "--env-file", "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "mcp/github-mcp-server:latest"
                  ]
                },
                "circleci": {
                  "command": "docker",
                  "args": [
                    "run", "--rm", "-i",
                    "--env-file", "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "local/mcp-server-circleci:latest"
                  ]
                },
                "filesystem": {
                  "command": "docker",
                  "args": [
                    "run", "--rm", "-i",
                    "--env-file", "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "--volume", "/Users/gfichtner/MacbookSetup:/project",
                    "mcp/filesystem:latest",
                    "/project"
                  ]
                },
                "docker": {
                  "command": "docker",
                  "args": [
                  "run", "--rm", "-i",
                  "--volume=/var/run/docker.sock:/var/run/docker.sock",
                  "--env-file", "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                  "mcp-server-docker:latest"
                  ]
                },
                "kubernetes": {
                  "command": "docker",
                  "args": [
                  "run", "--rm", "-i",
                  "--network=host",
                  "--volume=$KUBECONFIG_HOST:/root/.kube/config:ro",
                  "--env-file", "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                  "local/mcp-server-kubernetes:latest"
                  ]
                },
                "figma": {
                  "command": "docker",
                  "args": [
                    "run", "--rm", "-i",
                    "--env-file", "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "--entrypoint", "node",
                    "ghcr.io/metorial/mcp-container--glips--figma-context-mcp--figma-context-mcp:latest",
                    "dist/cli.js",
                    "--stdio"
                  ]
                },
                "heroku": {
                  "command": "docker",
                  "args": [
                    "run", "--rm", "-i",
                    "--env-file", "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "local/heroku-mcp-server:latest"
                  ]
                },
                "terraform": {
                  "command": "docker",
                  "args": [
                    "run", "--rm", "-i",
                    "--env-file", "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "hashicorp/terraform-mcp-server:latest"
                  ]
                },
                "rails": {
                  "command": "docker",
                  "args": [
                    "run", "--rm", "-i",
                    "--env-file", "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "--volume", "/Users/user/rails-projects:/rails-projects",
                    "--volume", "/Users/user/.config:/app/.config/rails-mcp",
                      "local/mcp-server-rails:latest"
                  ]
                },
                "terraform-cli-controller": {
                  "command": "docker",
                  "args": [
                  "run", "--rm", "-i",
                  "--network=host",
                  "--volume=/var/run/docker.sock:/var/run/docker.sock",
                  "--volume=/Users/gfichtner/MacbookSetup/tmp/test_home/.aws:/root/.aws:ro",
                  "--volume=/Users/gfichtner/MacbookSetup/tmp/test_home/terraform-projects:/workspace",
                  "--env-file", "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                  "local/terraform-cli-controller:latest",
                  "mcp"
                  ]
                }
              }
            }

          # spec/json_validation_spec.sh:286-289

  7) JSON Configuration Validation MCP Manager JSON Validation JSON Structure Validation generates valid JSON for Claude Desktop configuration
     When run jq . /Users/gfichtner/MacbookSetup/tmp/test_home/Library/Application Support/Claude/claude_desktop_config.json

     7.1) WARNING: There was output to stdout but not found expectation

            stdout: {
              "mcpServers": {
                "github": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "mcp/github-mcp-server:latest"
                  ]
                },
                "circleci": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "local/mcp-server-circleci:latest"
                  ]
                },
                "filesystem": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "--volume",
                    "/Users/gfichtner/MacbookSetup:/project",
                    "mcp/filesystem:latest",
                    "/project"
                  ]
                },
                "docker": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--volume=/var/run/docker.sock:/var/run/docker.sock",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "mcp-server-docker:latest"
                  ]
                },
                "kubernetes": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--network=host",
                    "--volume=$KUBECONFIG_HOST:/root/.kube/config:ro",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "local/mcp-server-kubernetes:latest"
                  ]
                },
                "figma": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "--entrypoint",
                    "node",
                    "ghcr.io/metorial/mcp-container--glips--figma-context-mcp--figma-context-mcp:latest",
                    "dist/cli.js",
                    "--stdio"
                  ]
                },
                "heroku": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "local/heroku-mcp-server:latest"
                  ]
                },
                "terraform": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "hashicorp/terraform-mcp-server:latest"
                  ]
                },
                "rails": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "--volume",
                    "/Users/user/rails-projects:/rails-projects",
                    "--volume",
                    "/Users/user/.config:/app/.config/rails-mcp",
                    "local/mcp-server-rails:latest"
                  ]
                },
                "terraform-cli-controller": {
                  "command": "docker",
                  "args": [
                    "run",
                    "--rm",
                    "-i",
                    "--network=host",
                    "--volume=/var/run/docker.sock:/var/run/docker.sock",
                    "--volume=/Users/gfichtner/MacbookSetup/tmp/test_home/.aws:/root/.aws:ro",
                    "--volume=/Users/gfichtner/MacbookSetup/tmp/test_home/terraform-projects:/workspace",
                    "--env-file",
                    "/Users/gfichtner/MacbookSetup/tmp/test_home/.env",
                    "local/terraform-cli-controller:latest",
                    "mcp"
                  ]
                }
              }
            }

          # spec/json_validation_spec.sh:291-294

  8) JSON Configuration Validation MCP Manager JSON Validation Cross-platform JSON Consistency Cursor and Claude configs should have identical server entries
     When run test  =

     8.1) Unexpected output to stderr occurred

            jq: error: Could not open file /Users/gfichtner/MacbookSetup/tmp/test_home/.cursor/mcp.json: No such file or directory
            jq: error: Could not open file /Users/gfichtner/MacbookSetup/tmp/test_home/Library/Application Support/Claude/claude_desktop_config.json: No such file or directory

          # spec/json_validation_spec.sh:440-445

  9) JSON Configuration Validation MCP Manager JSON Validation Cross-platform JSON Consistency both configs should use mcpServers wrapper format
     When run jq -e .mcpServers /Users/gfichtner/MacbookSetup/tmp/test_home/.cursor/mcp.json /Users/gfichtner/MacbookSetup/tmp/test_home/Library/Application Support/Claude/claude_desktop_config.json

     9.1) The status should be success

            expected: success (zero)
                 got: failure (non-zero) [status: 2]

          # spec/json_validation_spec.sh:449

     9.2) WARNING: There was output to stderr but not found expectation

            stderr: jq: error: Could not open file /Users/gfichtner/MacbookSetup/tmp/test_home/.cursor/mcp.json: No such file or directory
            jq: error: Could not open file /Users/gfichtner/MacbookSetup/tmp/test_home/Library/Application Support/Claude/claude_desktop_config.json: No such file or directory

          # spec/json_validation_spec.sh:447-450

  10) MCP Inspector Basic Functionality inspect command with no arguments when running inspect command (adaptive to environment) should run inspect command successfully regardless of container state
      When run ./mcp_manager.sh inspect

      10.1) The output should include DISCOVERY

              expected "=== MCP Server Inspection (All Servers) ===
              [0;34m[INFO][0m No MCP servers currently running
              [0;34m[SUGGESTION][0m Start servers first: ./mcp_manager.sh setup" to include "DISCOVERY"

            # spec/mcp_inspector_spec.sh:79

  11) MCP Inspector Basic Functionality inspect command with no arguments when running inspect command (adaptive to environment) should show appropriate results for the current environment
      When run ./mcp_manager.sh inspect

      11.1) The output should include DISCOVERY

              expected "=== MCP Server Inspection (All Servers) ===
              [0;34m[INFO][0m No MCP servers currently running
              [0;34m[SUGGESTION][0m Start servers first: ./mcp_manager.sh setup" to include "DISCOVERY"

            # spec/mcp_inspector_spec.sh:86

  12) MCP Inspector Basic Functionality inspect command with no arguments when testing core inspect functionality should provide consistent output structure
      When run ./mcp_manager.sh inspect

      12.1) The output should include [DISCOVERY]

              expected "=== MCP Server Inspection (All Servers) ===
              [0;34m[INFO][0m No MCP servers currently running
              [0;34m[SUGGESTION][0m Start servers first: ./mcp_manager.sh setup" to include "[DISCOVERY]"

            # spec/mcp_inspector_spec.sh:98

  13) MCP Inspector Advanced Features inspect --ui command when starting inspector UI should indicate UI startup
      13.1) SKIPPED: unless

            # spec/mcp_inspector_spec.sh:151

  14) MCP Inspector Advanced Features inspect --connectivity command when testing server connectivity should test connectivity to running servers
      14.1) SKIPPED: unless

            # spec/mcp_inspector_spec.sh:194

Finished in 247.25 seconds (user 35.11 seconds, sys 45.30 seconds)
147 examples, 5 failures, 7 warnings, 2 skips


Notable examples: (Listed here do not affect your suite's status)

shellspec spec/mcp_inspector_spec.sh:150 # 13) MCP Inspector Advanced Features inspect --ui command when starting inspector UI should indicate UI startup SKIPPED
shellspec spec/mcp_inspector_spec.sh:193 # 14) MCP Inspector Advanced Features inspect --connectivity command when testing server connectivity should test connectivity to running servers SKIPPED


Failure examples / Errors: (Listed here affect your suite's status)

shellspec spec/json_validation_spec.sh:112 # 1) JSON Configuration Validation Claude Desktop JSON Configuration generates valid JSON without syntax errors WARNED
shellspec spec/json_validation_spec.sh:162 # 2) JSON Configuration Validation JSON Content Validation has proper JSON indentation (2 spaces) WARNED
shellspec spec/json_validation_spec.sh:196 # 3) JSON Configuration Validation Generation Process Isolation config generation does not pollute JSON with log output WARNED
shellspec spec/json_validation_spec.sh:276 # 4) JSON Configuration Validation MCP Manager JSON Validation JSON Structure Validation Cursor configuration file exists WARNED
shellspec spec/json_validation_spec.sh:281 # 5) JSON Configuration Validation MCP Manager JSON Validation JSON Structure Validation generates valid JSON for Cursor configuration WARNED
shellspec spec/json_validation_spec.sh:286 # 6) JSON Configuration Validation MCP Manager JSON Validation JSON Structure Validation Claude Desktop configuration file exists WARNED
shellspec spec/json_validation_spec.sh:291 # 7) JSON Configuration Validation MCP Manager JSON Validation JSON Structure Validation generates valid JSON for Claude Desktop configuration WARNED
shellspec spec/json_validation_spec.sh:440 # 8) JSON Configuration Validation MCP Manager JSON Validation Cross-platform JSON Consistency Cursor and Claude configs should have identical server entries FAILED
shellspec spec/json_validation_spec.sh:447 # 9) JSON Configuration Validation MCP Manager JSON Validation Cross-platform JSON Consistency both configs should use mcpServers wrapper format FAILED
shellspec spec/mcp_inspector_spec.sh:75 # 10) MCP Inspector Basic Functionality inspect command with no arguments when running inspect command (adaptive to environment) should run inspect command successfully regardless of container state FAILED
shellspec spec/mcp_inspector_spec.sh:82 # 11) MCP Inspector Basic Functionality inspect command with no arguments when running inspect command (adaptive to environment) should show appropriate results for the current environment FAILED
shellspec spec/mcp_inspector_spec.sh:94 # 12) MCP Inspector Basic Functionality inspect command with no arguments when testing core inspect functionality should provide consistent output structure FAILED

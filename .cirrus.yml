---
# Cirrus CI configuration for testing MacbookSetup on Apple Silicon macOS

# Environment variables for the entire workflow
env:
  # Set non-interactive mode for Homebrew to avoid prompts
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  HOMEBREW_NO_ENV_HINTS: 1
  # Avoid prompts during script execution
  CI: true
  NONINTERACTIVE: 1

# Daily scheduled validation build
# This task runs every day at midnight UTC to ensure ongoing compatibility
# with the latest macOS updates and Homebrew formula changes
daily_validation_task:
  name: daily_compatibility_check
  trigger_type: scheduled
  cron: "0 0 * * *"  # Run at midnight UTC every day
  
  # Use macOS Ventura on Apple Silicon
  macos_instance:
    image: ghcr.io/cirruslabs/macos-ventura-base:latest
    cpu: 4
    memory: 8G
  
  # Set a timeout for the entire task (3 hours)
  timeout_in: 180m
  
  # Clone the repository
  clone_script:
    - git clone $CIRRUS_REPO_CLONE_URL .
  
  # Validate shell scripts with ShellCheck
  shellcheck_script:
    - |
      # Check if Homebrew is installed, install if needed
      if ! command -v brew &>/dev/null; then
        echo "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        
        # Add Homebrew to PATH for Apple Silicon Macs
        if [[ "$(uname -m)" == "arm64" ]]; then
          echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
          eval "$(/opt/homebrew/bin/brew shellenv)"
        else
          echo 'eval "$(/usr/local/bin/brew shellenv)"' >> ~/.zprofile
          eval "$(/usr/local/bin/brew shellenv)"
        fi
      else
        echo "Homebrew is already installed."
      fi
      
      # Install ShellCheck using Homebrew
      echo "Installing ShellCheck using Homebrew..."
      brew install shellcheck
      echo "ShellCheck version: $(shellcheck --version | head -n 1)"
      
      # Run ShellCheck on all shell scripts
      echo "Validating shell scripts with ShellCheck..."
      
      # Check specific important scripts
      shellcheck -S warning setup.sh
      shellcheck -S warning ci_modifiers.sh
      shellcheck -S warning verify_setup.sh.template
      
      # Find and check any other shell scripts
      find . -name "*.sh" -not -path "*/\.*" | while read -r script; do
        if [[ "$script" != "./setup.sh" && "$script" != "./ci_modifiers.sh" ]]; then
          echo "Checking $script..."
          shellcheck -S warning "$script"
        fi
      done
      
      echo "All shell scripts validated successfully."
  
  # Generate CI setup script by patching the original setup.sh
  prepare_script:
    - |
      # Source the CI modifiers
      source ci_modifiers.sh
      
      # Generate the CI setup script from the original setup.sh
      patch_for_ci setup.sh ci_setup.sh
      
      # Verify the script was created successfully
      if [[ ! -f ci_setup.sh ]]; then
        echo "Failed to generate CI setup script"
        exit 1
      fi
      
      # Validate the generated ci_setup.sh script
      echo "Validating generated ci_setup.sh script..."
      shellcheck -S warning ci_setup.sh
      echo "ci_setup.sh validation complete."
  
  # Create a test script to verify installations
  create_test_script:
    - cp verify_setup.sh.template verify_setup.sh
    - chmod +x verify_setup.sh
  
  # Run the actual setup
  setup_script:
    - ./ci_setup.sh

  # Verify the installation
  verify_script:
    - zsh ./verify_setup.sh
  
  # Always collect logs for debugging
  always:
    logs_artifacts:
      path: "*.log"
      type: text/plain

# Task for testing the setup script on macOS ARM
macos_arm_test_task:
  # Use macOS Ventura on Apple Silicon
  macos_instance:
    image: ghcr.io/cirruslabs/macos-ventura-base:latest
    cpu: 4
    memory: 8G
  
  # Set a timeout for the entire task (3 hours)
  timeout_in: 180m
  
  # Clone the repository
  clone_script:
    - git clone $CIRRUS_REPO_CLONE_URL .
  
  # Validate shell scripts with ShellCheck
  shellcheck_script:
    - |
      # Check if Homebrew is installed, install if needed
      if ! command -v brew &>/dev/null; then
        echo "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        
        # Add Homebrew to PATH for Apple Silicon Macs
        if [[ "$(uname -m)" == "arm64" ]]; then
          echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
          eval "$(/opt/homebrew/bin/brew shellenv)"
        else
          echo 'eval "$(/usr/local/bin/brew shellenv)"' >> ~/.zprofile
          eval "$(/usr/local/bin/brew shellenv)"
        fi
      else
        echo "Homebrew is already installed."
      fi
      
      # Install ShellCheck using Homebrew
      echo "Installing ShellCheck using Homebrew..."
      brew install shellcheck
      echo "ShellCheck version: $(shellcheck --version | head -n 1)"
      
      # Run ShellCheck on all shell scripts
      echo "Validating shell scripts with ShellCheck..."
      
      # Check specific important scripts
      shellcheck -S warning setup.sh
      shellcheck -S warning ci_modifiers.sh
      shellcheck -S warning verify_setup.sh.template
      
      # Find and check any other shell scripts
      find . -name "*.sh" -not -path "*/\.*" | while read -r script; do
        if [[ "$script" != "./setup.sh" && "$script" != "./ci_modifiers.sh" ]]; then
          echo "Checking $script..."
          shellcheck -S warning "$script"
        fi
      done
      
      echo "All shell scripts validated successfully."
  
  # Generate CI setup script by patching the original setup.sh
  prepare_script:
    - |
      # Source the CI modifiers
      source ci_modifiers.sh
      
      # Generate the CI setup script from the original setup.sh
      patch_for_ci setup.sh ci_setup.sh
      
      # Verify the script was created successfully
      if [[ ! -f ci_setup.sh ]]; then
        echo "Failed to generate CI setup script"
        exit 1
      fi
      
      # Validate the generated ci_setup.sh script
      echo "Validating generated ci_setup.sh script..."
      shellcheck -S warning ci_setup.sh
      echo "ci_setup.sh validation complete."
  
  # Create a test script to verify installations
  create_test_script:
    - cp verify_setup.sh.template verify_setup.sh
    - chmod +x verify_setup.sh
  
  # Run the actual setup
  setup_script:
    - ./ci_setup.sh

  # Verify the installation
  verify_script:
    - zsh ./verify_setup.sh
  
  # Always collect logs for debugging
  always:
    logs_artifacts:
      path: "*.log"
      type: text/plain


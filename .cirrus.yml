---
# Cirrus CI configuration for testing MacbookSetup on Apple Silicon macOS

# Environment variables for the entire workflow
env:
  # Set non-interactive mode for Homebrew to avoid prompts
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  HOMEBREW_NO_ENV_HINTS: 1
  # Avoid prompts during script execution
  CI: true
  NONINTERACTIVE: 1
  # Ensure proper PATH for commands
  PATH: /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$PATH
  # For antidote plugin manager
  ANTIDOTE_HOME: $HOME/.antidote

# Template for macOS instance configuration
.macos_instance_template: &macos_instance_template
  macos_instance:
    image: ghcr.io/cirruslabs/macos-sonoma-base:latest
    cpu: 4
    memory: 8G

  # Set a timeout for the entire task (3 hours)
  timeout_in: 180m

# Template for repository cloning
.clone_template: &clone_template
  clone_script:
    - git clone $CIRRUS_REPO_CLONE_URL .

# Template for shellcheck validation
.shellcheck_template: &shellcheck_template
  shellcheck_script:
    - |
      # Install Homebrew if needed
      if ! command -v brew &>/dev/null; then
        /bin/bash -c "$(curl -fsSL \
          https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        [[ "$(uname -m)" == "arm64" ]] && \
          eval "$(/opt/homebrew/bin/brew shellenv)"
      fi

      # Install ShellCheck
      brew install shellcheck

      # Validate shell scripts
      shellcheck -s bash \
        --external-sources \
        --source-path=SCRIPTDIR \
        --source-path="${PWD}/lib" \
        --source-path="${HOME}" \
        --exclude=SC1091,SC2296,SC2034,SC2154,SC2016 \
        ci_modifiers.sh setup.sh verify_setup.sh

# Template for system information (only used in daily validation)
.system_info_template: &system_info_template
  system_info_script:
    - |
      # Display system information for debugging
      echo "=== System Information ==="
      uname -a
      sw_vers
      echo "Shell: $SHELL"
      echo "ZSH version: $(zsh --version)"

# Template for CI setup script preparation
.prepare_template: &prepare_template
  prepare_script:
    - |
      # Install Homebrew if needed
      if ! command -v brew &>/dev/null; then
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        [[ "$(uname -m)" == "arm64" ]] && eval "$(/opt/homebrew/bin/brew shellenv)"
      fi

      # Install ShellCheck
      brew install shellcheck

      # Ensure script is executable
      chmod +x ci_modifiers.sh

      # Run the CI modifiers script directly in zsh
      # This generates ci_setup.sh without needing to source functions
      zsh ./ci_modifiers.sh

      # Verify the script was created successfully
      if [[ ! -f ci_setup.sh ]]; then
        echo "Failed to generate ci_setup.sh"
        exit 1
      fi

      # Make the generated script executable
      chmod +x ci_setup.sh

      # Validate the generated ci_setup.sh script
      echo "Validating generated ci_setup.sh script..."
      shellcheck -s bash \
        --external-sources \
        --source-path=SCRIPTDIR \
        --source-path="${PWD}/lib" \
        --source-path="${HOME}" \
        --exclude=SC1091,SC2296,SC2034,SC2154,SC2016 \
        ci_setup.sh
      echo "ci_setup.sh validation complete."

# Template for creating test script
.create_test_template: &create_test_template
  create_test_script:
    - |
      # Ensure verification script is executable
      chmod +x verify_setup.sh

      # Create .zsh_plugins.txt for antidote if it doesn't exist
      if [[ ! -f ~/.zsh_plugins.txt ]]; then
        mkdir -p ~/.antidote
        # Create plugins file using echo commands to avoid heredoc issues
        echo "# Core functionality" > ~/.zsh_plugins.txt
        echo "zsh-users/zsh-completions" >> ~/.zsh_plugins.txt
        echo "zsh-users/zsh-autosuggestions" >> ~/.zsh_plugins.txt
        echo "zsh-users/zsh-syntax-highlighting" >> ~/.zsh_plugins.txt
        echo "" >> ~/.zsh_plugins.txt
        echo "# Git integration" >> ~/.zsh_plugins.txt
        echo "ohmyzsh/ohmyzsh path:plugins/git" >> ~/.zsh_plugins.txt
        echo "" >> ~/.zsh_plugins.txt
        echo "# Kubernetes tools" >> ~/.zsh_plugins.txt
        echo "ohmyzsh/ohmyzsh path:plugins/kubectl" >> ~/.zsh_plugins.txt
        echo "ohmyzsh/ohmyzsh path:plugins/helm" >> ~/.zsh_plugins.txt
        echo "Created default .zsh_plugins.txt for antidote"
      fi

# Template for running the setup
.setup_template: &setup_template
  setup_script:
    - |
      # Ensure brew is in PATH for Apple Silicon
      [[ "$(uname -m)" == "arm64" ]] && \
        eval "$(/opt/homebrew/bin/brew shellenv)"

      # Install antidote if using it
      if grep -q "antidote" setup.sh; then
        brew install antidote
      fi

      # Create necessary directories for completions
      mkdir -p ${HOME}/.zsh/completions
      mkdir -p ${HOME}/.zcompcache

      # Run the setup script with CI-specific environment
      export CI=true
      export SKIP_ORBSTACK=true
      zsh ./ci_setup.sh

      # Show installed package versions
      echo "=== Installed Versions ==="
      command -v brew && brew --version
      command -v git && git --version
      command -v antidote && antidote --version || \
        echo "antidote has no version command"
      command -v rbenv && rbenv --version
      command -v pyenv && pyenv --version
      command -v terraform && terraform --version
      command -v starship && starship --version

# Template for verification
.verify_template: &verify_template
  verify_script: |
    # Switch to zsh for the entire verification process
    zsh -c '
      set -e
      # Initialize completion system
      autoload -Uz compinit
      compinit
      # Set up completion directories
      mkdir -p ${HOME}/.zsh/completions
      fpath=(${HOME}/.zsh/completions $fpath)
      # Ensure the shell is properly loaded
      echo "Running verification script..."
      # Source zshrc to ensure all configurations are loaded
      source ~/.zshrc || { echo "Failed to source ~/.zshrc"; exit 1; }
      # Force local output mode and disable GitHub Actions output
      export QUIET_MODE=false
      export GITHUB_ACTIONS=false
      # Run verification in local mode
      ./verify_setup.sh 2>&1 | tee verify.log
      # Exit with the status of verify_setup.sh
      exit ${PIPESTATUS[0]}
    '

# Template for artifact collection
.artifacts_template: &artifacts_template
  always:
    logs_artifacts:
      path: "*.log"
      type: text/plain
    shell_artifacts:
      path: "~/.zshrc"
      type: text/plain
    plugins_artifacts:
      path: "~/.zsh_plugins.txt"
      type: text/plain

# Daily scheduled validation build
daily_validation_task:
  name: daily_compatibility_check
  trigger_type: scheduled
  cron: "0 0 * * *"  # Run at midnight UTC every day

  # Include all configurations using templates
  <<: [*macos_instance_template, *clone_template,
       *prepare_template, *create_test_template, *setup_template,
       *verify_template, *artifacts_template]

# Task for testing the setup script on macOS ARM (on-demand)
macos_arm_test_task:
  name: macos_arm_test

  # Include common configurations using templates
  <<: [*macos_instance_template, *clone_template,
       *shellcheck_template, *prepare_template, *create_test_template,
       *setup_template, *verify_template, *artifacts_template]
